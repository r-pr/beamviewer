{"version":3,"sources":["settings.ts","InitialScreen.tsx","rtc-connection.ts","sig-server-client.ts","Spinner.tsx","user-media.ts","PubScreen.tsx","CloseButton.tsx","errors.ts","SubScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["srvHost","window","location","host","wsProtocol","protocol","Settings","HTTP_SRV_URL","concat","WS_SRV_URL","MAIN_DIV_CLASS","DEFAULT_ICE_SERVERS","urls","InitialScreen","p","c","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickPub","bind","assertThisInitialized","onClickSub","onKeyPress","handleSessIdChange","handleNickNameChnage","handleAudioCheckboxChange","state","sessId","nickName","audioChecked","react_default","a","createElement","Fragment","className","type","placeholder","value","onChange","style","textAlign","onClick","margin","marginBottom","id","checked","htmlFor","display","props","error","role","marginTop","e","setState","target","trim","evt","event","keyCode","which","onDecision","mode","withAudio","Date","now","toString","sessionId","React","Component","connectionCouner","PublisherConnection","_EventEmitter","stream","iceServers","internalId","rtcConnection","RTCPeerConnection","addStream","onicecandidate","candidate","emit","oniceconnectionstatechange","iceConnectionState","close","inherits","createClass","key","EventEmitter","spleep","msec","Promise","resolve","setTimeout","SigServerClient","url","onCandidate","onOffer","onAnswer","ws","pendingPromise","previousReconnectTime","closedByUser","_getIceServers","asyncToGenerator","regenerator_default","mark","_callee","resp","wrap","_context","prev","next","axios","get","sent","status","data","console","warn","abrupt","stop","apply","arguments","reject","log","WebSocket","reconnect","onopen","onerror","ev","onmessage","onMessage","onclose","_this2","numbers","Uint8Array","letters","crypto","getRandomValues","forEach","n","push","join","generateRandomString","send","sess_id","_this3","nickname","obj","JSON","stringify","websocket","msg","json","parse","message","handleLoginResp","handleCandidate","handleOffer","handleAnswer","handleJoinResp","Error","offer","answer","_this4","delay","_callee2","_context2","connect","t0","logIn","Spinner","width","height","UserMedia","canGetDisplayMedia","navigator","mediaDevices","getDisplayMedia","audio","video","cursor","getUserMedia","nav","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","tmpConn","candidatesBuff","offerSent","peerConnections","PubScreen","videoRef","userMedia","loading","connectedPeersCount","createRef","copySessIdToClipboard","pause","resume","isBrowserOld","sigServer","createTmpConn","sendOffer","videoStream","getIceServers","pubConn","on","getRtcConnection","once","incrementPeersCount","decrementPeersCount","off","length","cand","getSessId","getAudioStream","getAudioTracks","track","addTrack","current","srcObject","createOffer","setLocalDescription","setRemoteDescription","RTCSessionDescription","newOffer","ref","autoPlay","border","borderRadius","getActiveElement","clipboard","writeText","src_Spinner","removeStream","conn","getSenders","sender","removeTrack","addTracks","getVideoTracks","CloseButton","hovered","onMouseEnter","onMouseLeave","onExit","translateErrCode","errCode","SubScreen","exitOk","ontrack","streams","maximizeVideoElem","createAnswer","then","addIceCandidate","RTCIceCandidate","CloseButton_CloseButton","position","top","left","App","onUserDecision","getActiveComponent","err","appMode","undefined","decision","PubScreen_PubScreen","SubScreen_SubScreen","InitialScreen_InitialScreen","Boolean","hostname","match","replace","href","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76297b4f.chunk.js","sourcesContent":["interface ISettings {\r\n    HTTP_SRV_URL: string;\r\n    WS_SRV_URL: string;\r\n    MAIN_DIV_CLASS: string;\r\n    DEFAULT_ICE_SERVERS: RTCIceServer[];\r\n}\r\n\r\nconst srvHost = process.env.NODE_ENV === \"production\" ?\r\n    window.location.host : \"localhost:3322\";\r\n\r\nconst wsProtocol = (window.location.protocol === \"https:\") ? \"wss:\" : \"ws:\";\r\n\r\nexport const Settings: ISettings = {\r\n    HTTP_SRV_URL: `${window.location.protocol}//${srvHost}`,\r\n    WS_SRV_URL: `${wsProtocol}//${srvHost}`,\r\n    MAIN_DIV_CLASS: \"col-sm-6 col-md-4 col-lg-4 offset-sm-3 offset-md-4 offset-lg-4\",\r\n    DEFAULT_ICE_SERVERS: [{\r\n        urls: \"stun:stun.l.google.com:19302\",\r\n    }],\r\n};\r\n","import React from \"react\";\nimport { IUserAppMode } from \"./interfaces\";\nimport { Settings} from \"./settings\";\n\nconst { MAIN_DIV_CLASS } = Settings;\n\nconst CHAR_CODE_ENTER = 13;\n\ninterface IProps {\n    onDecision: (d: IUserAppMode) => void;\n    error: string;\n}\n\ninterface IState {\n    sessId: string;\n    nickName: string;\n    audioChecked: boolean;\n}\n\nexport default class InitialScreen extends React.Component<IProps, IState> {\n\n    constructor(p: IProps, c: any) {\n        super(p, c);\n        this.onClickPub = this.onClickPub.bind(this);\n        this.onClickSub = this.onClickSub.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n        this.handleSessIdChange = this.handleSessIdChange.bind(this);\n        this.handleNickNameChnage = this.handleNickNameChnage.bind(this);\n        this.handleAudioCheckboxChange = this.handleAudioCheckboxChange.bind(this);\n        this.state = {\n            sessId: \"\",\n            nickName: \"\",\n            audioChecked: false\n        };\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <div className=\"row\">\n                    <div className={MAIN_DIV_CLASS}>\n                        <div className=\"input-group mb-3\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Session ID\"\n                                value={this.state.sessId}\n                                onChange={this.handleSessIdChange}\n                                onKeyPress={this.onKeyPress}\n                                style={{textAlign: \"center\"}}\n                            />\n                        </div>\n                        <button\n                            className=\"btn btn-primary btn-block\"\n                            onClick={this.onClickSub}\n                        >\n                            Join session\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className={MAIN_DIV_CLASS}>\n                        <hr style={{margin: \"2em 0em\"}}/>\n                        <div className=\"form-group\">\n                            <button\n                                style={{marginBottom: \"0.8em\"}}\n                                className=\"btn btn-success btn-block\"\n                                onClick={this.onClickPub}\n                            >\n                                Create session\n                            </button>\n                            <div className=\"form-group form-check\">\n                                <input\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"\n                                    id=\"checkAudio\"\n                                    onChange={this.handleAudioCheckboxChange}\n                                    checked={this.state.audioChecked}\n                                />\n                                <label className=\"form-check-label\" htmlFor=\"checkAudio\">\n                                    With audio\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div\n                    className=\"row\"\n                    style={{ display: this.props.error ? \"block\" : \"none\" }}\n                >\n                    <div className={MAIN_DIV_CLASS}>\n                        <div\n                            className=\"alert alert-danger\"\n                            role=\"alert\"\n                            style={{marginTop: \"1em\"}}\n                        >\n                            {this.props.error}\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private handleSessIdChange(e: any) {\n        this.setState({sessId: e.target.value.trim()});\n    }\n\n    private handleNickNameChnage(e: any) {\n        this.setState({nickName: e.target.value.trim()});\n    }\n\n    private handleAudioCheckboxChange(e: any) {\n       this.setState({audioChecked: e.target.checked});\n    }\n\n    private onKeyPress(evt: any) {\n        evt = evt || window.event;\n        const charCode = evt.keyCode || evt.which;\n        if (charCode === CHAR_CODE_ENTER) {\n            this.onClickSub(null);\n        }\n    }\n\n    private onClickPub(e: any) {\n        this.props.onDecision({\n            mode: \"pub\",\n            withAudio: this.state.audioChecked\n        });\n    }\n\n    private onClickSub(e: any) {\n        this.props.onDecision({\n            mode: \"sub\",\n            // nickName:  this.state.nickName,\n            nickName: Date.now().toString(),\n            sessionId: this.state.sessId,\n        });\n    }\n}\n","import { EventEmitter } from \"events\";\r\n\r\nlet connectionCouner = 1;\r\n\r\nexport class PublisherConnection extends EventEmitter {\r\n\r\n    public readonly internalId: number;\r\n    private rtcConnection: RTCPeerConnection;\r\n\r\n    constructor(private stream: MediaStream, private iceServers: RTCIceServer[]) {\r\n        super();\r\n        this.internalId = connectionCouner;\r\n        connectionCouner++;\r\n        this.rtcConnection = new RTCPeerConnection({iceServers});\r\n        (this.rtcConnection as any).addStream(stream);\r\n        this.rtcConnection.onicecandidate = (event: any) => {\r\n            if (event.candidate) {\r\n                this.emit(\"candidate\", event.candidate);\r\n            }\r\n        };\r\n        this.rtcConnection.oniceconnectionstatechange  = () => {\r\n            if (this.rtcConnection.iceConnectionState === \"connected\") {\r\n                this.emit(\"connected\");\r\n            } else if (this.rtcConnection.iceConnectionState === \"disconnected\") {\r\n                this.rtcConnection.close();\r\n                this.emit(\"disconnected\");\r\n            }\r\n        };\r\n    }\r\n\r\n    public getRtcConnection(): RTCPeerConnection {\r\n        return this.rtcConnection;\r\n    }\r\n}\r\n","import axios from \"axios\";\r\nimport { IObj } from \"./interfaces\";\r\nimport { Settings } from \"./settings\";\r\n\r\n// TODO: finish\r\n\r\nfunction generateRandomString(): string {\r\n    const len = 3;\r\n    const numbers = new Uint8Array(len);\r\n    const letters: string[] = [];\r\n    window.crypto.getRandomValues(numbers);\r\n    numbers.forEach( (n) => letters.push(n.toString(16)) );\r\n    return letters.join(\"\");\r\n}\r\n\r\nfunction spleep(msec: number) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, msec);\r\n    });\r\n}\r\n\r\nexport class SigServerClient {\r\n\r\n    public static async getIceServers(): Promise<RTCIceServer[]> {\r\n        const url = `${Settings.HTTP_SRV_URL}/ice_servers`;\r\n        const resp = await axios.get(url);\r\n        if (resp.status !== 200 ||\r\n            !resp.data ||\r\n            !resp.data.iceServers\r\n        ) {\r\n            console.warn(\"default ice servers\");\r\n            return Settings.DEFAULT_ICE_SERVERS;\r\n        }\r\n        return resp.data.iceServers;\r\n    }\r\n\r\n    public onCandidate: any;\r\n    public onOffer: any;\r\n    public onAnswer: any;\r\n\r\n    private url: string;\r\n    private ws: any;\r\n    private pendingPromise: any;\r\n    private sessId: string;\r\n    private previousReconnectTime: number;\r\n    private closedByUser: boolean;\r\n\r\n    constructor(url: string) {\r\n        this.ws = null;\r\n        this.url = url;\r\n        this.pendingPromise = {};\r\n        this.sessId = \"\";\r\n        this.previousReconnectTime = 0;\r\n        this.closedByUser = false;\r\n    }\r\n\r\n    public getSessId() {\r\n        return this.sessId;\r\n    }\r\n\r\n    public connect() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                console.log(\"try construct websocket\");\r\n                this.ws = new WebSocket(this.url);\r\n                console.log(\"ws constructed\");\r\n            } catch (e) {\r\n                console.log(\"ws construct:: err\");\r\n                reject(e);\r\n                return this.reconnect();\r\n            }\r\n\r\n            this.ws.onopen = resolve;\r\n            this.ws.onerror = (ws: WebSocket, ev: Event): any => {\r\n                console.warn(\"ws::on_error::\", ev);\r\n            };\r\n            this.ws.onmessage = this.onMessage.bind(this);\r\n            this.ws.onclose = () => {\r\n                this.ws.onerror = null;\r\n                this.ws.onmessage = null;\r\n                if (this.closedByUser) {\r\n                    return;\r\n                }\r\n                console.log(\"ws closed, gonna reconnect\");\r\n                if (Date.now() - this.previousReconnectTime < 2000) {\r\n                    console.log(`wait 2000 msec before reconnect`);\r\n                    setTimeout(this.reconnect.bind(this), 2000);\r\n                } else {\r\n                    this.reconnect();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public logIn(sessionId?: string) {\r\n        return new Promise((resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            if (!sessionId) {\r\n                sessionId = generateRandomString();\r\n                this.sessId = sessionId;\r\n            } else {\r\n                console.log(`login, sessId=${sessionId} (${typeof sessionId})`);\r\n            }\r\n            this.send({\r\n                type: \"login\",\r\n                sess_id: sessionId,\r\n            });\r\n        });\r\n    }\r\n\r\n    public join(sessId: string, nickName: string) {\r\n        return new Promise((resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            this.send({\r\n                type: \"join\",\r\n                sess_id: sessId,\r\n                nickname: nickName,\r\n            });\r\n        });\r\n    }\r\n\r\n    public send(obj: IObj) {\r\n        this.ws.send(JSON.stringify(obj));\r\n    }\r\n\r\n    public close() {\r\n        this.closedByUser = true;\r\n        if (this.ws) {\r\n            if (this.ws.close) {\r\n                // так должно работать и так работает в опере\r\n                this.ws.close();\r\n            } else if (this.ws.websocket && this.ws.websocket.close) {\r\n                // откуда берется this.ws.websocket - неизвестно\r\n                // но в firefox выполняется именно этот блок\r\n                this.ws.websocket.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMessage(msg: any) {\r\n        let json: any = {};\r\n        try {\r\n            json = JSON.parse(msg.data);\r\n        } catch (e) {\r\n            console.warn(\"ws: \" + e.message + \". msg.data=\" + msg.data);\r\n            return;\r\n        }\r\n        console.log(\"ws: \", json);\r\n        switch (json.type) {\r\n        case \"login_resp\":\r\n            this.handleLoginResp(json);\r\n            break;\r\n        case \"candidate\":\r\n            this.handleCandidate(json);\r\n            break;\r\n        case \"offer\":\r\n            this.handleOffer(json);\r\n            break;\r\n        case \"answer\":\r\n            this.handleAnswer(json);\r\n            break;\r\n        case \"join_resp\":\r\n            this.handleJoinResp(json);\r\n            break;\r\n        }\r\n    }\r\n\r\n    private handleLoginResp(resp: any) {\r\n        if (resp.status === \"ok\") {\r\n            this.pendingPromise.resolve(this.sessId);\r\n        } else {\r\n            this.pendingPromise.reject(new Error(resp.error));\r\n        }\r\n        this.pendingPromise = {};\r\n    }\r\n\r\n    private handleJoinResp(resp: any) {\r\n        if (resp.status === \"ok\") {\r\n            this.pendingPromise.resolve();\r\n        } else {\r\n            this.pendingPromise.reject(new Error(resp.error));\r\n        }\r\n        this.pendingPromise = {};\r\n    }\r\n\r\n    private handleCandidate(msg: any) {\r\n        console.log(Date.now() + \" ws: got candidate\");\r\n        if (this.onCandidate && typeof this.onCandidate === \"function\") {\r\n            this.onCandidate(msg.candidate);\r\n        }\r\n    }\r\n\r\n    private handleOffer(msg: any) {\r\n        console.log(Date.now() + \" ws: got offer\");\r\n        if (!msg.offer) {\r\n            console.warn(\".offer is \" + msg.offer);\r\n            return;\r\n        }\r\n        if (this.onOffer && typeof this.onOffer === \"function\") {\r\n            this.onOffer(msg.offer);\r\n        }\r\n    }\r\n\r\n    private handleAnswer(msg: any) {\r\n        if (this.onAnswer && typeof this.onAnswer === \"function\") {\r\n            this.onAnswer(msg.answer);\r\n        } else {\r\n            console.warn(\"no handler\");\r\n        }\r\n    }\r\n\r\n    private reconnect() {\r\n        if (this.closedByUser) {\r\n            return;\r\n        }\r\n        this.previousReconnectTime = Date.now();\r\n        this.ws = null;\r\n        const minDelay = 1;\r\n        const maxDelay = 10;\r\n        let delay = minDelay;\r\n        (async () => {\r\n            while (true) {\r\n                try {\r\n                    console.log(\"try reconnect\");\r\n                    await this.connect();\r\n                    break;\r\n                } catch (e) {\r\n                    console.warn(e);\r\n                    if (delay < maxDelay) {\r\n                        delay++;\r\n                    }\r\n                    console.log(`reconnect failed, now sleeping ${delay} sec`);\r\n                    await spleep(delay * 1000);\r\n                }\r\n            }\r\n            console.log(\"reconnected\");\r\n            if (this.sessId) {\r\n                console.log(\"was logged in before, logging after reconnect\");\r\n                await this.logIn(this.sessId);\r\n                console.log(\"login after reconnect: ok\");\r\n            }\r\n        })();\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Spinner: React.FC = () => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n            <div\r\n                className=\"spinner-border\"\r\n                style={{width: \"3rem\", height: \"3rem\"}}\r\n                role=\"status\"\r\n            >\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import { IObj } from \"./interfaces\";\r\n\r\ntype getUserMedia_t = Navigator[\"getUserMedia\"];\r\n\r\nexport class UserMedia {\r\n\r\n    public getDisplayMedia(): Promise<MediaStream> {\r\n        if (!this.canGetDisplayMedia()) {\r\n            throw new Error(\"old browser\");\r\n        }\r\n        const options: IObj = {\r\n            audio: false,\r\n            video: {\r\n                cursor: \"never\",\r\n            },\r\n        };\r\n        return (navigator.mediaDevices as any).getDisplayMedia(options);\r\n    }\r\n\r\n    public getAudioStream(): Promise<MediaStream> {\r\n        return new Promise<MediaStream>((resolve, reject) => {\r\n            const getUserMedia = this.getUserMedia();\r\n            if (!getUserMedia) {\r\n                return reject(\"old browser\");\r\n            } else {\r\n                getUserMedia.call(navigator, {audio: true, video: false}, resolve, reject);\r\n            }\r\n        });\r\n    }\r\n\r\n    public isBrowserOld(): boolean {\r\n        return !(this.canGetDisplayMedia() && this.getUserMedia());\r\n    }\r\n\r\n    private canGetDisplayMedia(): boolean {\r\n        return navigator.mediaDevices && !!(navigator.mediaDevices as any).getDisplayMedia;\r\n    }\r\n\r\n    private getUserMedia(): getUserMedia_t | undefined {\r\n        const nav = navigator as any;\r\n        return (nav.getUserMedia || nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia || nav.msGetUserMedia);\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\n\r\nimport { IObj } from \"./interfaces\";\r\nimport { PublisherConnection } from \"./rtc-connection\";\r\nimport { Settings } from \"./settings\";\r\nimport { SigServerClient } from \"./sig-server-client\";\r\nimport Spinner from \"./Spinner\";\r\nimport { UserMedia } from \"./user-media\";\r\n\r\nconst { MAIN_DIV_CLASS } = Settings;\r\n\r\ninterface IState {\r\n    sessId: string;\r\n    error: string;\r\n    loading: boolean;\r\n    connectedPeersCount: number;\r\n}\r\n\r\ninterface IProps {\r\n    withAudio: boolean;\r\n}\r\n\r\nlet tmpConn: any = null;\r\n\r\nlet candidatesBuff: IObj[] = [];\r\nlet offerSent: boolean = false;\r\n\r\nconst peerConnections: any[] = [];\r\n\r\nexport default class PubScreen extends React.Component<IProps, IState> {\r\n\r\n    private videoRef: RefObject<HTMLVideoElement>;\r\n    private userMedia: UserMedia;\r\n    private stream: MediaStream | null;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            sessId: \"\",\r\n            error: \"\",\r\n            loading: true,\r\n            connectedPeersCount: 0,\r\n        };\r\n        this.videoRef = React.createRef<HTMLVideoElement>();\r\n        this.userMedia = new UserMedia();\r\n        this.copySessIdToClipboard = this.copySessIdToClipboard.bind(this);\r\n        this.stream = null;\r\n        this.pause = this.pause.bind(this);\r\n        this.resume = this.resume.bind(this);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (this.userMedia.isBrowserOld()) {\r\n            this.setState({error: \"you have an old browser, go get a newer one\"});\r\n            return;\r\n        }\r\n        (async () => {\r\n            try {\r\n                const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n                const iceServers = await SigServerClient.getIceServers();\r\n                const createTmpConn = (stream: MediaStream) => {\r\n                    candidatesBuff = [];\r\n                    const pubConn = new PublisherConnection(stream, iceServers);\r\n                    pubConn.on(\"candidate\", (candidate) => {\r\n                        if (offerSent) {\r\n                            sigServer.send({\r\n                                type: \"candidate\",\r\n                                candidate\r\n                            });\r\n                            console.log(pubConn.internalId, \"candidate sent\");\r\n                        } else {\r\n                            console.log(pubConn.internalId, \"candidate buffered\");\r\n                            candidatesBuff.push(candidate);\r\n                        }\r\n                    });\r\n                    if (tmpConn !== null) {\r\n                        peerConnections.push(tmpConn);\r\n                    }\r\n                    tmpConn = pubConn.getRtcConnection();\r\n                    pubConn.once(\"connected\", () => this.incrementPeersCount());\r\n                    pubConn.once(\"disconnected\", () => {\r\n                        this.decrementPeersCount();\r\n                        // todo: remove connection from array\r\n                    });\r\n                };\r\n\r\n                const sendOffer = (off: any) => {\r\n                    sigServer.send({\r\n                        type: \"offer\",\r\n                        offer: off,\r\n                    });\r\n                    offerSent = true;\r\n                    if (candidatesBuff.length) {\r\n                        candidatesBuff.forEach((cand) => {\r\n                            sigServer.send({\r\n                                type: \"candidate\",\r\n                                candidate: cand,\r\n                            });\r\n                        });\r\n                    }\r\n                };\r\n\r\n                await sigServer.connect();\r\n                await sigServer.logIn();\r\n                const sessId = sigServer.getSessId();\r\n\r\n                const videoStream = await this.userMedia.getDisplayMedia();\r\n\r\n                if (this.props.withAudio) {\r\n                    const audioStream = await this.userMedia.getAudioStream();\r\n                    audioStream.getAudioTracks().forEach((track) => {\r\n                        videoStream.addTrack(track);\r\n                    });\r\n                }\r\n\r\n                this.stream = videoStream;\r\n\r\n                if (this.videoRef.current) {\r\n                    this.videoRef.current.srcObject = videoStream;\r\n                }\r\n\r\n                createTmpConn(videoStream);\r\n\r\n                const offer = await tmpConn.createOffer();\r\n\r\n                tmpConn.setLocalDescription(offer);\r\n\r\n                sigServer.onAnswer = (answer: any) => {\r\n                    tmpConn.setRemoteDescription(new RTCSessionDescription(answer));\r\n                    (async () => {\r\n                        console.log(\"creating new peer connection...\");\r\n                        createTmpConn(videoStream);\r\n                        const newOffer = await tmpConn.createOffer();\r\n                        tmpConn.setLocalDescription(newOffer);\r\n                        sendOffer(newOffer);\r\n                    })();\r\n                };\r\n\r\n                sendOffer(offer);\r\n\r\n                this.setState({sessId, loading: false});\r\n            } catch (e) {\r\n                console.error(e);\r\n                this.setState({error: e.message});\r\n            }\r\n        })();\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className={MAIN_DIV_CLASS}>\r\n                    <video\r\n                        ref={this.videoRef}\r\n                        autoPlay={true}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: this.state.loading ? \"none\" : \"block\",\r\n                            border: \"1px solid darkgray\",\r\n                            borderRadius: \"0.5em\",\r\n                        }}\r\n                    />\r\n                    {this.getActiveElement()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private incrementPeersCount() {\r\n        this.setState({connectedPeersCount: this.state.connectedPeersCount + 1});\r\n    }\r\n\r\n    private decrementPeersCount() {\r\n        this.setState({connectedPeersCount: this.state.connectedPeersCount - 1});\r\n    }\r\n\r\n    private copySessIdToClipboard() {\r\n        if (navigator.clipboard && navigator.clipboard.writeText) {\r\n            navigator.clipboard.writeText(this.state.sessId);\r\n        }\r\n    }\r\n\r\n    private getActiveElement(): JSX.Element {\r\n        if (this.state.error) {\r\n            return (\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    {this.state.error}\r\n                </div>\r\n            );\r\n        } else {\r\n            if (this.state.loading) {\r\n                return <Spinner/>;\r\n            } else {\r\n                return (\r\n                    <React.Fragment>\r\n                        <h5 style={{marginTop: \"2em\"}}>\r\n                            Session ID:  <b>{this.state.sessId}</b>\r\n                            &nbsp;&nbsp;\r\n                            <button\r\n                                className=\"btn btn-secondary btn-sm\"\r\n                                onClick={this.copySessIdToClipboard}\r\n                            >\r\n                                Copy\r\n                            </button>\r\n                        </h5>\r\n                        <h5>Connected peers: {this.state.connectedPeersCount}</h5>\r\n                        {/* <button onClick={this.pause}>\r\n                            pause\r\n                        </button>\r\n                        <button onClick={this.resume}>\r\n                            resume\r\n                        </button> */}\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    private pause() {\r\n        function removeStream(conn: RTCPeerConnection) {\r\n            conn.getSenders().forEach((sender) => {\r\n                conn.removeTrack(sender);\r\n            });\r\n        }\r\n        if (tmpConn) {\r\n            removeStream(tmpConn);\r\n        }\r\n        peerConnections.forEach((conn) => {\r\n            removeStream(conn);\r\n        });\r\n    }\r\n\r\n    private resume() {\r\n        function addTracks(conn: RTCPeerConnection, stream: MediaStream) {\r\n            stream.getVideoTracks().forEach((track) => {\r\n                conn.addTrack(track);\r\n            });\r\n            stream.getAudioTracks().forEach((track) => {\r\n                conn.addTrack(track);\r\n            });\r\n        }\r\n        if (this.stream) {\r\n            if (tmpConn) {\r\n                addTracks(tmpConn, this.stream);\r\n                tmpConn.addStream(this.stream);\r\n            }\r\n            peerConnections.forEach((conn) => {\r\n                addTracks(conn, this.stream as MediaStream );\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./CloseButton.css\";\r\n\r\ninterface IState {\r\n    hovered: boolean;\r\n}\r\n\r\ninterface IProps {\r\n    onExit: () => void;\r\n}\r\n\r\nexport default class CloseButton extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            hovered: false\r\n        };\r\n        this.onMouseEnter = this.onMouseEnter.bind(this);\r\n        this.onMouseLeave = this.onMouseLeave.bind(this);\r\n    }\r\n    public render() {\r\n        return (\r\n            <div\r\n                className=\"CloseButton\"\r\n                onMouseEnter={this.onMouseEnter}\r\n                onMouseLeave={this.onMouseLeave}\r\n                onClick={this.props.onExit}\r\n            >\r\n                <p>{this.state.hovered ? \"Exit\" : \"×\"}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onMouseEnter(e: any) {\r\n        this.setState({hovered: true});\r\n    }\r\n\r\n    private onMouseLeave(e: any) {\r\n        this.setState({hovered: false});\r\n    }\r\n}\r\n","export function translateErrCode(errCode: string): string {\r\n    switch (errCode) {\r\n    case \"ENOTFOUND\":\r\n        return \"Session with given ID not found\";\r\n    default:\r\n        return errCode;\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\nimport CloseButton from \"./CloseButton\";\r\nimport { translateErrCode } from \"./errors\";\r\nimport { Settings } from \"./settings\";\r\nimport { SigServerClient } from \"./sig-server-client\";\r\n\r\ninterface IProps {\r\n    sessId: string;\r\n    nickName: string;\r\n    onExit: (e?: Error) => void;\r\n}\r\n\r\nexport default class SubScreen extends React.Component<IProps, {}> {\r\n\r\n    private videoRef: RefObject<HTMLVideoElement>;\r\n    private sigServer: SigServerClient;\r\n    private rtcConnection: RTCPeerConnection | null = null;\r\n\r\n    constructor(p: IProps) {\r\n        super(p);\r\n        this.state = {\r\n            error: \"\",\r\n        };\r\n        this.videoRef = React.createRef<HTMLVideoElement>();\r\n        this.exitOk = this.exitOk.bind(this);\r\n        this.sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const nickname = this.props.nickName;\r\n        (async () => {\r\n            await this.sigServer.connect();\r\n            const iceServers = await SigServerClient.getIceServers();\r\n            const rtcConnection = new RTCPeerConnection({iceServers});\r\n            this.rtcConnection = rtcConnection;\r\n            rtcConnection.oniceconnectionstatechange  = (e) => {\r\n                if (rtcConnection.iceConnectionState === \"disconnected\") {\r\n                    rtcConnection.close();\r\n                    this.sigServer.close();\r\n                    this.props.onExit(new Error(\"peer connection was closed\"));\r\n                }\r\n            };\r\n            rtcConnection.ontrack = (e) => {\r\n                if (this.videoRef.current) {\r\n                    const stream = e.streams[0];\r\n                    this.videoRef.current.srcObject = stream;\r\n                    this.maximizeVideoElem();\r\n                } else {\r\n                    throw new Error(\"sth went wrong\");\r\n                }\r\n            };\r\n\r\n            rtcConnection.onicecandidate = (event) => {\r\n                if (event.candidate) {\r\n                    this.sigServer.send({\r\n                        type: \"candidate\",\r\n                        candidate: event.candidate,\r\n                        nickname,\r\n                    });\r\n                }\r\n            };\r\n\r\n            this.sigServer.onOffer = (offer: RTCSessionDescriptionInit) => {\r\n                try {\r\n                    rtcConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n                    rtcConnection.createAnswer().then((answer) => {\r\n                        rtcConnection.setLocalDescription(answer);\r\n                        this.sigServer.send({\r\n                            type: \"answer\",\r\n                            answer,\r\n                            nickname,\r\n                        });\r\n                    }, (error) => {\r\n                        console.error(error);\r\n                    });\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n\r\n            };\r\n\r\n            this.sigServer.onCandidate = (cand: RTCIceCandidateInit) => {\r\n                try {\r\n                    rtcConnection.addIceCandidate(new RTCIceCandidate(cand));\r\n                } catch (e) {\r\n                    console.warn(e.message);\r\n                    console.log(\"candidate:\", cand);\r\n                }\r\n            };\r\n\r\n            try {\r\n                await this.sigServer.join(this.props.sessId, nickname);\r\n            } catch (e) {\r\n                console.warn(e);\r\n                this.props.onExit(new Error(\r\n                    translateErrCode(e.message),\r\n                ));\r\n            }\r\n        })();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-xs-12\">\r\n                    <video ref={this.videoRef} autoPlay={true} style={{width: \"100%\" }}/>\r\n                    <CloseButton onExit={this.exitOk}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private maximizeVideoElem(): void {\r\n        if (this.videoRef.current) {\r\n            this.videoRef.current.style.position = \"absolute\";\r\n            this.videoRef.current.style.top = \"0px\";\r\n            this.videoRef.current.style.left = \"0px\";\r\n        }\r\n    }\r\n\r\n    private exitOk() {\r\n        if (this.rtcConnection) {\r\n            this.rtcConnection.close();\r\n        }\r\n        this.sigServer.close();\r\n        this.props.onExit();\r\n    }\r\n}\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport InitialScreen from \"./InitialScreen\";\nimport { IUserAppMode } from \"./interfaces\";\nimport PubScreen from \"./PubScreen\";\nimport SubScreen from \"./SubScreen\";\nimport CloseButton from \"./CloseButton\";\n\ninterface IState {\n    appMode?: IUserAppMode;\n    error: string;\n}\n\nexport default class App extends React.Component<{}, IState> {\n\n    constructor(p: {}, c: any) {\n        super(p, c);\n        this.state = {\n            error: \"\",\n        };\n        this.onUserDecision = this.onUserDecision.bind(this);\n        this.onExit = this.onExit.bind(this);\n    }\n\n    public render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <h1 className=\"col-sm-12 App-header2\" style={{textAlign: \"center\"}}>\n                        BeamViewer\n                    </h1>\n                </div>\n                {this.getActiveComponent()}\n                 {/* <CloseButton onExit={()=>{}}/>  */}\n            </div>\n        );\n    }\n\n    private onExit(err?: Error) {\n        if (err) {\n            this.setState({appMode: undefined, error: err.message});\n        } else {\n            this.setState({appMode: undefined});\n        }\n    }\n\n    private onUserDecision(decision: IUserAppMode) {\n        this.setState({appMode: decision});\n    }\n\n    private getActiveComponent(): JSX.Element {\n        if (this.state.appMode) {\n            if (this.state.appMode.mode === \"pub\") {\n                return <PubScreen withAudio={this.state.appMode.withAudio}/>;\n            } else if (this.state.appMode.mode === \"sub\") {\n                return (\n                    <SubScreen\n                        nickName={this.state.appMode.nickName}\n                        sessId={this.state.appMode.sessionId}\n                        onExit={this.onExit}\n                    />\n                );\n            } else {\n                throw new Error();\n            }\n        } else {\n            return (\n                <InitialScreen\n                    onDecision={this.onUserDecision}\n                    error={this.state.error}\n                />\n            );\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nif (process.env.NODE_ENV === \"production\" &&\n    window.location.protocol === \"http:\" &&\n    window.location.hostname !== \"localhost\") {\n    console.log(\"redirect to https\");\n    // screen capture api only works via https\n    window.location.replace(window.location.href.replace(\"http:\", \"https:\"));\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\nserviceWorker.unregister();\n"],"sourceRoot":""}